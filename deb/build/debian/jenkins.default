# defaults for jenkins continuous integration server

# pulled in from the init script; makes things easier.
NAME=@@ARTIFACTNAME@@

# location of java
JAVA=/usr/bin/java

# Sensible defaults, server is normally default but we ensure it is on
# AlwaysPreTouch prezeroes allocated heap pages at startup, which improves runtime performance at slight cost to startup time
# ParallelRefProcEnabled enables use of concurrent threads to process references, which Jenkins uses heavily for caching
BASE_JAVA_ARGS=' -server -XX:+AlwaysPreTouch -XX:+ParallelRefProcEnabled '

# Turns on GC logging for Jenkins, with log rotation, for diagnostics and tuning use
GC_LOGGING=" -Xloggc:$JENKINS_HOME/gc-%t.log -XX:NumberOfGCLogFiles=2 -XX:+UseGCLogFileRotation -XX:GCLogFileSize=100m \
  -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintHeapAtGC -XX:+PrintGCCause \
  -XX:+PrintTenuringDistribution -XX:+PrintReferenceGC -XX:+PrintAdaptiveSizePolicy "

# If you are using multiple cores and a heap of >= 2 GB then you should use this and tweak it
# Suggested tweaks: increase region size, especially for small heap sizes i.e. -XX:G1HeapRegionSize=8
G1GC_ARGS=' -XX:+UseG1GC -XX:+UnlockDiagnosticVMOptions -XX:G1SummarizeRSetStatsPeriod=1 -XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses -XX:+UseStringDeduplication '

# Look to see if we should suggest G1 garbage collection instead of defaults, with more than 2 cores and Java 8 or newer
CPU_COUNT=$(cat /proc/cpuinfo | grep 'core id' | sort | uniq | wc -l)
# This is not *guaranteed* to use the same Java version as Jenkins does, but it's a reasonable heuristic
JAVA_VERSION=$(java -version 2>&1 | grep -Eo '"[0-9]\.[0-9]+.[0-9]*_?[0-9]*"' | sed 's/_/./g' | sed 's/"//g')
MAJOR_JAVA_VERSION=$(echo $JAVA_VERSION | sed -E 's/[0-9]+\.([0-9]+)\.[0-9]+\.[0-9]+/\1/g')
if [ -z "$MAJOR_JAVA_VERSION" ]; then MAJOR_JAVA_VERSION=8; fi
AUTO_GC=""
if [ $CPU_COUNT -gt 2 ] && [ $MAJOR_JAVA_VERSION -gt 7 ]; then
    AUTO_GC=$G1GC_ARGS
fi

# Headless allows graphs etc. to work even when an X server is present
# The others apply some sensible defaults -- if you don't want G1 GC to autoselect on multicore systems, remove that
JAVA_ARGS="-Djava.awt.headless=true $BASE_JAVA_ARGS $GC_LOGGING $AUTO_GC"  
#JAVA_ARGS="-Xmx256m"
#JAVA_ARGS="-Djava.net.preferIPv4Stack=true" # make jenkins listen on IPv4 address

PIDFILE=/var/run/$NAME/$NAME.pid

# user and group to be invoked as (default to jenkins)
JENKINS_USER=$NAME
JENKINS_GROUP=$NAME

# location of the jenkins war file
JENKINS_WAR=/usr/share/$NAME/$NAME.war

# jenkins home location
JENKINS_HOME=/var/lib/$NAME

# set this to false if you don't want Hudson to run by itself
# in this set up, you are expected to provide a servlet container
# to host jenkins.
RUN_STANDALONE=true

# log location.  this may be a syslog facility.priority
JENKINS_LOG=/var/log/$NAME/$NAME.log
#JENKINS_LOG=daemon.info

# OS LIMITS SETUP
#   comment this out to observe /etc/security/limits.conf
#   this is on by default because http://github.com/jenkinsci/jenkins/commit/2fb288474e980d0e7ff9c4a3b768874835a3e92e
#   reported that Ubuntu's PAM configuration doesn't include pam_limits.so, and as a result the # of file
#   descriptors are forced to 1024 regardless of /etc/security/limits.conf
MAXOPENFILES=8192

# set the umask to control permission bits of files that Jenkins creates.
#   027 makes files read-only for group and inaccessible for others, which some security sensitive users
#   might consider benefitial, especially if Jenkins runs in a box that's used for multiple purposes.
#   Beware that 027 permission would interfere with sudo scripts that run on the master (JENKINS-25065.)
#
#   Note also that the particularly sensitive part of $JENKINS_HOME (such as credentials) are always
#   written without 'others' access. So the umask values only affect job configuration, build records,
#   that sort of things.
#
#   If commented out, the value from the OS is inherited,  which is normally 022 (as of Ubuntu 12.04,
#   by default umask comes from pam_umask(8) and /etc/login.defs

# UMASK=027

# port for HTTP connector (default 8080; disable with -1)
HTTP_PORT=@@PORT@@


# servlet context, important if you want to use apache proxying  
PREFIX=/$NAME

# arguments to pass to jenkins.
# --javahome=$JAVA_HOME
# --httpPort=$HTTP_PORT (default 8080; disable with -1)
# --httpsPort=$HTTP_PORT
# --argumentsRealm.passwd.$ADMIN_USER=[password]
# --argumentsRealm.roles.$ADMIN_USER=admin
# --webroot=~/.jenkins/war
# --prefix=$PREFIX

JENKINS_ARGS="--webroot=/var/cache/$NAME/war --httpPort=$HTTP_PORT"
